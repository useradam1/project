from typing import overload, Optional, Union, Tuple, Generator, List
from numpy import radians, deg2rad

zerfloat: float = 0.0
onefloat: float = 1.0




def sin(value: float) -> float: ...
def cos(value: float) -> float: ...
def tan(value: float) -> float: ...




class vec2:

	@overload
	def __init__(self, x: float) -> None: ...

	@overload
	def __init__(self, x: float, y: float) -> None: ...

	def __init__(self, x: float, y: Optional[float] = None) -> None: ...


	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, value: float) -> None: ...

	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, value: float) -> None: ...

	def GetArray(self) -> Tuple[float, float]: ...

	@overload
	def SetArray(self, x: float) -> 'vec2': ...
	@overload
	def SetArray(self, x: float, y: float) -> 'vec2': ...
	def SetArray(self, x: float, y: Optional[float] = None) -> 'vec2': ...

	def SetValue(self, value: 'vec2') -> 'vec2': ...


	@staticmethod
	def DotProduct(a: 'vec2', b: 'vec2') -> float: ...
	@staticmethod
	def CrossProduct(a: 'vec2', b: 'vec2') -> float: ...
	@staticmethod
	def Magnitude(a: 'vec2') -> float: ...
	@staticmethod
	def Normalize(a: 'vec2') -> 'vec2': ...
	@property
	def normalize(self) -> 'vec2': ...
	@staticmethod
	def Projection(a: 'vec2', b: 'vec2') -> 'vec2': ...
	def project(self, b: 'vec2') -> 'vec2': ...
	@staticmethod
	def Angle(a: 'vec2', b: 'vec2') -> float: ...



	def __neg__(self) -> 'vec2': ...
	def __pos__(self) -> 'vec2': ...
	def __abs__(self) -> 'vec2': ...

	def __lt__(self, value: Union['vec2', float]) -> bool: ...
	def __le__(self, value: Union['vec2', float]) -> bool: ...
	def __eq__(self, value: Union['vec2', float]) -> bool: ...
	def __ne__(self, value: Union['vec2', float]) -> bool: ...
	def __ge__(self, value: Union['vec2', float]) -> bool: ...
	def __gt__(self, value: Union['vec2', float]) -> bool: ...

	def __add__(self, value: Union['vec2', float]) -> 'vec2': ...
	def __radd__(self, value: float) -> 'vec2': ...
	def __iadd__(self, value: Union['vec2', float]) -> 'vec2': ...

	def __sub__(self, value: Union['vec2', float]) -> 'vec2': ...
	def __rsub__(self, value: float) -> 'vec2': ...
	def __isub__(self, value: Union['vec2', float]) -> 'vec2': ...

	def __mul__(self, value: Union['mat2', 'vec2', float]) -> 'vec2': ...
	def __rmul__(self, value: float) -> 'vec2': ...
	def __imul__(self, value: Union['mat2', 'vec2', float]) -> 'vec2': ...

	def __pow__(self, value: Union['vec2', float]) -> 'vec2': ...
	def __rpow__(self, value: float) -> 'vec2': ...
	def __ipow__(self, value: Union['vec2', float]) -> 'vec2': ...

	def __truediv__(self, value: Union['vec2', float]) -> 'vec2': ...
	def __rtruediv__(self, value: float) -> 'vec2': ...
	def __itruediv__(self, value: Union['vec2', float]) -> 'vec2': ...

#####################################################################################################################################################

class mat2:

	def __init__(self, 
		m11: float = onefloat, m12: float = zerfloat, 
		m21: float = zerfloat, m22: float = onefloat
	) -> None: ...

	@property
	def m11(self) -> float: ...
	@m11.setter
	def m11(self, value: float) -> None: ...
	@property
	def m12(self) -> float: ...
	@m12.setter
	def m12(self, value: float) -> None: ...
	@property
	def m21(self) -> float: ...
	@m21.setter
	def m21(self, value: float) -> None: ...
	@property
	def m22(self) -> float: ...
	@m22.setter
	def m22(self, value: float) -> None: ...

	def GetArray(self) -> Tuple[float, float, float, float]: ...
	def SetArray(self, 
		m11: float = onefloat, m12: float = zerfloat, 
		m21: float = zerfloat, m22: float = onefloat
	) -> 'mat2': ...
	def SetValue(self, value: 'mat2') -> 'mat2': ...

	@staticmethod
	def Inverse(a: 'mat2') -> 'mat2': ...
	@property
	def inverse(self) -> 'mat2': ...

	@overload
	def __mul__(self, value: 'mat2') -> 'mat2': ...
	@overload
	def __mul__(self, value: vec2) -> vec2: ...
	@overload
	def __mul__(self, value: float) -> 'mat2': ...
	def __mul__(self, value: Union['mat2', vec2, float]) -> Union['mat2', vec2]: ...
	def __rmul__(self, value: float) -> 'mat2': ...
	def __imul__(self, value: Union['mat2', float]) -> 'mat2': ...


#==============================================================================================================
#==============================================================================================================
#==============================================================================================================


class vec3:

	@overload
	def __init__(self, x: float) -> None: ...

	@overload
	def __init__(self, x: float, y: float, z: float) -> None: ...

	def __init__(self, x: float, y: Optional[float] = None, z: Optional[float] = None) -> None: ...


	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, value: float) -> None: ...

	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, value: float) -> None: ...

	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, value: float) -> None: ...

	def GetArray(self) -> Tuple[float, float, float]: ...

	@overload
	def SetArray(self, x: float) -> 'vec3': ...
	@overload
	def SetArray(self, x: float, y: float, z: float) -> 'vec3': ...
	def SetArray(self, x: float, y: Optional[float] = None, z: Optional[float] = None) -> 'vec3': ...

	def SetValue(self, value: 'vec3') -> 'vec3': ...


	@staticmethod
	def DotProduct(a: 'vec3', b: 'vec3') -> float: ...
	@staticmethod
	def CrossProduct(a: 'vec3', b: 'vec3') -> 'vec3': ...
	def crossBy(self, b: 'vec3') -> 'vec3': ...
	@staticmethod
	def Magnitude(a: 'vec3') -> float: ...
	@staticmethod
	def Normalize(a: 'vec3') -> 'vec3': ...
	@property
	def normalize(self) -> 'vec3': ...
	@staticmethod
	def Projection(a: 'vec3', b: 'vec3') -> 'vec3': ...
	def project(self, b: 'vec3') -> 'vec3': ...
	@staticmethod
	def Angle(a: 'vec3', b: 'vec3') -> float: ...



	def __neg__(self) -> 'vec3': ...
	def __pos__(self) -> 'vec3': ...
	def __abs__(self) -> 'vec3': ...

	def __lt__(self, value: Union['vec3', float]) -> bool: ...
	def __le__(self, value: Union['vec3', float]) -> bool: ...
	def __eq__(self, value: Union['vec3', float]) -> bool: ...
	def __ne__(self, value: Union['vec3', float]) -> bool: ...
	def __ge__(self, value: Union['vec3', float]) -> bool: ...
	def __gt__(self, value: Union['vec3', float]) -> bool: ...

	def __add__(self, value: Union['vec3', float]) -> 'vec3': ...
	def __radd__(self, value: float) -> 'vec3': ...
	def __iadd__(self, value: Union['vec3', float]) -> 'vec3': ...

	def __sub__(self, value: Union['vec3', float]) -> 'vec3': ...
	def __rsub__(self, value: float) -> 'vec3': ...
	def __isub__(self, value: Union['vec3', float]) -> 'vec3': ...

	def __mul__(self, value: Union['mat3', 'vec3', float]) -> 'vec3': ...
	def __rmul__(self, value: float) -> 'vec3': ...
	def __imul__(self, value: Union['mat3', 'vec3', float]) -> 'vec3': ...

	def __pow__(self, value: Union['vec3', float]) -> 'vec3': ...
	def __rpow__(self, value: float) -> 'vec3': ...
	def __ipow__(self, value: Union['vec3', float]) -> 'vec3': ...

	def __truediv__(self, value: Union['vec3', float]) -> 'vec3': ...
	def __rtruediv__(self, value: float) -> 'vec3': ...
	def __itruediv__(self, value: Union['vec3', float]) -> 'vec3': ...

#####################################################################################################################################################

class mat3:

	def __init__(self, 
		m11: float = onefloat, m12: float = zerfloat, m13: float = zerfloat,
		m21: float = onefloat, m22: float = zerfloat, m23: float = zerfloat, 
		m31: float = onefloat, m32: float = zerfloat, m33: float = zerfloat
	) -> None: ...

	@property
	def m11(self) -> float: ...
	@m11.setter
	def m11(self, value: float) -> None: ...
	@property
	def m12(self) -> float: ...
	@m12.setter
	def m12(self, value: float) -> None: ...
	@property
	def m13(self) -> float: ...
	@m13.setter
	def m13(self, value: float) -> None: ...

	@property
	def m21(self) -> float: ...
	@m21.setter
	def m21(self, value: float) -> None: ...
	@property
	def m22(self) -> float: ...
	@m22.setter
	def m22(self, value: float) -> None: ...
	@property
	def m23(self) -> float: ...
	@m23.setter
	def m23(self, value: float) -> None: ...

	@property
	def m31(self) -> float: ...
	@m31.setter
	def m31(self, value: float) -> None: ...
	@property
	def m32(self) -> float: ...
	@m32.setter
	def m32(self, value: float) -> None: ...
	@property
	def m33(self) -> float: ...
	@m33.setter
	def m33(self, value: float) -> None: ...

	def GetArray(self) -> Tuple[float, float, float, float, float, float, float, float, float]: ...

	def SetArray(self,
		m11: float = onefloat, m12: float = zerfloat, m13: float = zerfloat,
		m21: float = onefloat, m22: float = zerfloat, m23: float = zerfloat, 
		m31: float = onefloat, m32: float = zerfloat, m33: float = zerfloat
	) -> 'mat3': ...
	def SetValue(self, value: 'mat3') -> 'mat3': ...

	@staticmethod
	def Inverse(a: 'mat3') -> 'mat3': ...
	@property
	def inverse(self) -> 'mat3': ...

	@overload
	def __mul__(self, value: 'mat3') -> 'mat3': ...
	@overload
	def __mul__(self, value: vec3) -> vec3: ...
	@overload
	def __mul__(self, value: float) -> 'mat3': ...
	def __mul__(self, value: Union['mat3', vec3, float]) -> Union['mat3', vec3]: ...
	def __rmul__(self, value: float) -> 'mat3': ...
	def __imul__(self, value: Union['mat3', float]) -> 'mat3': ...


#==============================================================================================================
#==============================================================================================================
#==============================================================================================================


class vec4:

	@overload
	def __init__(self, x: float) -> None: ...

	@overload
	def __init__(self, x: float, y: float, z: float, w: float) -> None: ...

	def __init__(self, x: float, y: Optional[float] = None, z: Optional[float] = None, w: Optional[float] = None) -> None: ...


	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, value: float) -> None: ...

	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, value: float) -> None: ...

	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, value: float) -> None: ...

	@property
	def w(self) -> float: ...
	@w.setter
	def w(self, value: float) -> None: ...

	def GetArray(self) -> Tuple[float, float, float, float]: ...

	@overload
	def SetArray(self, x: float) -> 'vec4': ...
	@overload
	def SetArray(self, x: float, y: float, z: float, w: float) -> 'vec4': ...
	def SetArray(self, x: float, y: Optional[float] = None, z: Optional[float] = None, w: Optional[float] = None) -> 'vec4': ...

	def SetValue(self, value: 'vec4') -> 'vec4': ...


	@staticmethod
	def DotProduct(a: 'vec4', b: 'vec4') -> float: ...
	@staticmethod
	def Magnitude(a: 'vec4') -> float: ...
	@staticmethod
	def Normalize(a: 'vec4') -> 'vec4': ...
	@property
	def normalize(self) -> 'vec4': ...
	@staticmethod
	def Projection(a: 'vec4', b: 'vec4') -> 'vec4': ...
	def project(self, b: 'vec4') -> 'vec4': ...
	@staticmethod
	def Angle(a: 'vec4', b: 'vec4') -> float: ...



	def __neg__(self) -> 'vec4': ...
	def __pos__(self) -> 'vec4': ...
	def __abs__(self) -> 'vec4': ...

	def __lt__(self, value: Union['vec4', float]) -> bool: ...
	def __le__(self, value: Union['vec4', float]) -> bool: ...
	def __eq__(self, value: Union['vec4', float]) -> bool: ...
	def __ne__(self, value: Union['vec4', float]) -> bool: ...
	def __ge__(self, value: Union['vec4', float]) -> bool: ...
	def __gt__(self, value: Union['vec4', float]) -> bool: ...

	def __add__(self, value: Union['vec4', float]) -> 'vec4': ...
	def __radd__(self, value: float) -> 'vec4': ...
	def __iadd__(self, value: Union['vec4', float]) -> 'vec4': ...

	def __sub__(self, value: Union['vec4', float]) -> 'vec4': ...
	def __rsub__(self, value: float) -> 'vec4': ...
	def __isub__(self, value: Union['vec4', float]) -> 'vec4': ...

	def __mul__(self, value: Union['mat4', 'vec4', float]) -> 'vec4': ...
	def __rmul__(self, value: float) -> 'vec4': ...
	def __imul__(self, value: Union['mat4', 'vec4', float]) -> 'vec4': ...

	def __pow__(self, value: Union['vec4', float]) -> 'vec4': ...
	def __rpow__(self, value: float) -> 'vec4': ...
	def __ipow__(self, value: Union['vec4', float]) -> 'vec4': ...

	def __truediv__(self, value: Union['vec4', float]) -> 'vec4': ...
	def __rtruediv__(self, value: float) -> 'vec4': ...
	def __itruediv__(self, value: Union['vec4', float]) -> 'vec4': ...

#####################################################################################################################################################

class mat4:

	def __init__(self, 
		m11: float = onefloat, m12: float = zerfloat, m13: float = zerfloat, m14: float = zerfloat,
		m21: float = onefloat, m22: float = zerfloat, m23: float = zerfloat, m24: float = zerfloat,
		m31: float = onefloat, m32: float = zerfloat, m33: float = zerfloat, m34: float = zerfloat,
		m41: float = onefloat, m42: float = zerfloat, m43: float = zerfloat, m44: float = zerfloat,
	) -> None: ...

	@property
	def m11(self) -> float: ...
	@m11.setter
	def m11(self, value: float) -> None: ...
	@property
	def m12(self) -> float: ...
	@m12.setter
	def m12(self, value: float) -> None: ...
	@property
	def m13(self) -> float: ...
	@m13.setter
	def m13(self, value: float) -> None: ...
	@property
	def m14(self) -> float: ...
	@m14.setter
	def m14(self, value: float) -> None: ...

	@property
	def m21(self) -> float: ...
	@m21.setter
	def m21(self, value: float) -> None: ...
	@property
	def m22(self) -> float: ...
	@m22.setter
	def m22(self, value: float) -> None: ...
	@property
	def m23(self) -> float: ...
	@m23.setter
	def m23(self, value: float) -> None: ...
	@property
	def m24(self) -> float: ...
	@m24.setter
	def m24(self, value: float) -> None: ...

	@property
	def m31(self) -> float: ...
	@m31.setter
	def m31(self, value: float) -> None: ...
	@property
	def m32(self) -> float: ...
	@m32.setter
	def m32(self, value: float) -> None: ...
	@property
	def m33(self) -> float: ...
	@m33.setter
	def m33(self, value: float) -> None: ...
	@property
	def m34(self) -> float: ...
	@m34.setter
	def m34(self, value: float) -> None: ...

	@property
	def m41(self) -> float: ...
	@m41.setter
	def m41(self, value: float) -> None: ...
	@property
	def m42(self) -> float: ...
	@m42.setter
	def m42(self, value: float) -> None: ...
	@property
	def m43(self) -> float: ...
	@m43.setter
	def m43(self, value: float) -> None: ...
	@property
	def m44(self) -> float: ...
	@m44.setter
	def m44(self, value: float) -> None: ...

	def __int__(self): ...

	def GetArray(self) -> Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float]: ...

	def SetArray(self,
		m11: float = onefloat, m12: float = zerfloat, m13: float = zerfloat, m14: float = zerfloat,
		m21: float = onefloat, m22: float = zerfloat, m23: float = zerfloat, m24: float = zerfloat,
		m31: float = onefloat, m32: float = zerfloat, m33: float = zerfloat, m34: float = zerfloat,
		m41: float = onefloat, m42: float = zerfloat, m43: float = zerfloat, m44: float = zerfloat,
	) -> 'mat4': ...
	def SetValue(self, value: 'mat4') -> 'mat4': ...

	@staticmethod
	def Inverse(a: 'mat4') -> 'mat4': ...
	@property
	def inverse(self) -> 'mat4': ...

	@overload
	def __mul__(self, value: 'mat4') -> 'mat4': ...
	@overload
	def __mul__(self, value: vec4) -> vec4: ...
	@overload
	def __mul__(self, value: vec3) -> vec3: ...
	@overload
	def __mul__(self, value: float) -> 'mat4': ...
	def __mul__(self, value: Union['mat4', vec4, vec3, float]) -> Union['mat4', vec4, vec3]: ...
	def __rmul__(self, value: float) -> 'mat4': ...
	def __imul__(self, value: Union['mat4', float]) -> 'mat4': ...



class Rotation(mat3):
	def __init__(self) -> None: ...
	def SetArray(self,
		m11: float = onefloat, m12: float = zerfloat, m13: float = zerfloat,
		m21: float = onefloat, m22: float = zerfloat, m23: float = zerfloat, 
		m31: float = onefloat, m32: float = zerfloat, m33: float = zerfloat
	) -> 'Rotation': ...
	def SetValue(self, value: mat3) -> 'Rotation': ...
	@staticmethod
	def GetRotateMat(axis: vec3, angle: float) -> mat3: ...
	def R(self, axis: vec3, angle: float) -> 'Rotation': ...
	def Gx(self, angle: float) -> 'Rotation': ...
	def Gy(self, angle: float) -> 'Rotation': ...
	def Gz(self, angle: float) -> 'Rotation': ...
	def Lx(self, angle: float) -> 'Rotation': ...
	def Ly(self, angle: float) -> 'Rotation': ...
	def Lz(self, angle: float) -> 'Rotation': ...
	@property
	def inverse(self) -> 'Rotation': ...
	def __imul__(self, value: Union[mat3, float]) -> 'Rotation': ...


class Position(vec3):

	def crossBy(self, b: vec3) -> 'Position': ...
	@property
	def normalize(self) -> 'Position': ...
	def project(self, b: vec3) -> 'Position': ...

	@overload
	def SetArray(self, x: float) -> 'Position': ...
	@overload
	def SetArray(self, x: float, y: float, z: float) -> 'Position': ...
	def SetArray(self, x: float, y: Optional[float] = None, z: Optional[float] = None) -> 'Position': ...
	def SetValue(self, value: vec3) -> 'Position': ...

	def __iadd__(self, value: Union[vec3, float]) -> 'Position': ...
	def __isub__(self, value: Union[vec3, float]) -> 'Position': ...
	def __imul__(self, value: Union[vec3, float]) -> 'Position': ...
	def __ipow__(self, value: Union[vec3, float]) -> 'Position': ...
	def __itruediv__(self, value: Union[vec3, float]) -> 'Position': ...

class Scale(vec3):

	def crossBy(self, b: vec3) -> 'Scale': ...
	@property
	def normalize(self) -> 'Scale': ...
	def project(self, b: vec3) -> 'Scale': ...

	@overload
	def SetArray(self, x: float) -> 'Scale': ...
	@overload
	def SetArray(self, x: float, y: float, z: float) -> 'Scale': ...
	def SetArray(self, x: float, y: Optional[float] = None, z: Optional[float] = None) -> 'Scale': ...
	def SetValue(self, value: vec3) -> 'Scale': ...

	def __iadd__(self, value: Union[vec3, float]) -> 'Scale': ...
	def __isub__(self, value: Union[vec3, float]) -> 'Scale': ...
	def __imul__(self, value: Union[vec3, float]) -> 'Scale': ...
	def __ipow__(self, value: Union[vec3, float]) -> 'Scale': ...
	def __itruediv__(self, value: Union[vec3, float]) -> 'Scale': ...

class Transform:
	def __init__(self,
		position: Position,
		scale: Scale,
		rotation: Rotation
	) -> None: ...

	def SetParent(self, parent: 'Transform') -> None: ...
	def GetParent(self) -> Optional['Transform']: ...
	def ClearParent(self) -> None: ...

	@property
	def right(self) -> vec3: ...
	@property
	def up(self) -> vec3: ...
	@property
	def forward(self) -> vec3: ...

	@property
	def localPosition(self) -> vec3: ...
	@property
	def position(self) -> Position: ...
	@position.setter
	def position(self, value: Union[vec3,Position]) -> None: ...
	@property
	def localScale(self) -> vec3: ...
	@property
	def scale(self) -> Scale: ...
	@scale.setter
	def scale(self, value: Union[vec3,Scale]) -> None: ...
	@property
	def localRotation(self) -> mat3: ...
	@property
	def rotation(self) -> Rotation: ...
	@rotation.setter
	def rotation(self, value: Union[vec3,Rotation]) -> None: ...

	def GetTransformationMatrix(self) -> mat4: ...
	def GetTransformationMatrixInv(self) -> mat4: ...



def CalculateOclusionCulling(
	projection: mat4, 
	view: Transform, 
	transforms: Generator[Transform,None,None],
	min_volume: Tuple[float,float,float], 
	max_volume: Tuple[float,float,float], 
	far: float
) -> List[mat4]: ...


def sdSphere_dist(p: vec3, l: Transform) -> float: ...
def sdSphere_point_on(p: vec3, l: Transform) -> Tuple[vec3,vec3]: ...


def sdBox_dist(p: vec3, l: Transform) -> float: ...
def sdBox_point_on(p: vec3, l: Transform) -> Tuple[vec3,vec3]: ...

