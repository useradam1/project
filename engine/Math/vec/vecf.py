from ctypes import POINTER, c_float, Array
from typing import Union, Literal, Optional, List, overload

zero_float = 0.0
one_float = 1.0

class vec3:

	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, value: float) -> None: ...

	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, value: float) -> None: ...

	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, value: float) -> None: ...
	
	def __init__(self, x: float = zero_float, y: float = zero_float, z: float = zero_float) -> None: ...

	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[3]: ...
	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...
	def __contains__(self, value: float) -> bool: ...

	def __neg__(self) -> 'vec3': ...
	def __pos__(self) -> 'vec3': ...
	def __abs__(self) -> 'vec3': ...

	def __lt__(self, value: 'allowed_types_vec3') -> bool: ...
	def __le__(self, value: 'allowed_types_vec3') -> bool: ...
	def __eq__(self, value: 'allowed_types_vec3') -> bool: ...
	def __ne__(self, value: 'allowed_types_vec3') -> bool: ...
	def __gt__(self, value: 'allowed_types_vec3') -> bool: ...
	def __ge__(self, value: 'allowed_types_vec3') -> bool: ...

	def SetValues(self, x: float, y: float, z: float) -> None: ...
	def SetVector(self, value: 'vec3') -> None: ...

	def CreateCType(self) -> Array[c_float]: ...

	@property
	def magnitude(self) -> float: ...
	@property
	def sqrMagnitude(self) -> float: ...
	def Normalize(self) -> None: ...
	def Normalize_from(self, value: 'vec3') -> None: ...
	@classmethod
	def GetNormalized(cls, value: 'vec3') -> 'vec3': ...

	def __iadd__(self, value: 'allowed_types_vec3') -> 'vec3': ...

	def __add__(self, value: 'allowed_types_vec3') -> 'vec3': ...

	def __radd__(self, value: float) -> 'vec3': ...

	def __isub__(self, value: 'allowed_types_vec3') -> 'vec3': ...

	def __sub__(self, value: 'allowed_types_vec3') -> 'vec3': ...

	def __rsub__(self, value: float) -> 'vec3': ...

	def __imul__(self, value: 'allowed_types_vec3_mat3') -> 'vec3': ...

	def __mul__(self, value: 'allowed_types_vec3_mat3') -> 'vec3': ...

	def __rmul__(self, value: 'allowed_types_vec3') -> 'vec3': ...

	def __itruediv__(self, value: 'allowed_types_vec3') -> 'vec3': ...

	def __truediv__(self, value: 'allowed_types_vec3') -> 'vec3': ...

	def __rtruediv__(self, value: float) -> 'vec3': ...

allowed_types_vec3 = Union[vec3, float]
allowed_types_vec3_mat3 = Union[vec3, 'mat3', float]


class mat3:

	def __init__(self,
		m11: float = one_float, m12: float = zero_float, m13: float = zero_float,
		m21: float = zero_float, m22: float = one_float, m23: float = zero_float,
		m31: float = zero_float, m32: float = zero_float, m33: float = one_float
	) -> None: ...

	def __repr__(self) -> str: ...


	def __len__(self) -> Literal[9]: ...			
	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...
	def __contains__(self, value: float) -> bool: ...

	def __neg__(self) -> 'mat3': ...
	def __pos__(self) -> 'mat3': ...
	def __abs__(self) -> 'mat3': ...

	def __lt__(self, value: float) -> bool: ...
	def __le__(self, value: float) -> bool: ...
	def __eq__(self, value: 'mat3') -> bool: ...
	def __ne__(self, value: 'mat3') -> bool: ...	
	def __ge__(self, value: float) -> bool: ...
	def __gt__(self, value: float) -> bool: ...

	def SetValues(self, m11: float, m12: float, m13: float, m21: float, m22: float, m23: float, m31: float, m32: float, m33: float) -> None: ...
	def SetMatrix(self, value: 'mat3') -> None: ...

	def CreateCTypeBasisI(self) -> Array[c_float]: ...
	def CreateCTypeBasisJ(self) -> Array[c_float]: ...
	def CreateCTypeBasisK(self) -> Array[c_float]: ...
	def CreateCType(self) -> Array[c_float]: ...

	@property
	def determinant(self) -> float: ...

	def Inverse(self) -> 'mat3': ...
	def InverseFrom(self, value: 'mat3') -> 'mat3': ...
	@classmethod
	def GetInverse(cls, value: 'mat3') -> 'mat3': ...

	def __iadd__(self, value: 'allowed_types_mat3') -> 'mat3': ...

	def __add__(self, value: 'allowed_types_mat3') -> 'mat3': ...

	def __radd__(self, value: float) -> 'mat3': ...

	def __isub__(self, value: 'allowed_types_mat3') -> 'mat3': ...

	def __sub__(self, value: 'allowed_types_mat3') -> 'mat3': ...

	def __rsub__(self, value: float) -> 'mat3': ...

	def __imul__(self, value: 'allowed_types_mat3') -> 'mat3': ...

	@overload
	def __mul__(self, value: vec3) -> vec3: ...
	@overload
	def __mul__(self, value: 'allowed_types_mat3') -> 'mat3': ...
	def __mul__(self, value: 'allowed_types_mat3_vec3') -> Union['mat3', vec3]: ...

	def __rmul__(self, value: float) -> 'mat3': ...

allowed_types_mat3 = Union[mat3, float]
allowed_types_mat3_vec3 = Union[mat3, vec3, float]


class Rotation(mat3):

	def Rotate(self, angle: float, x: float, y: float, z: float) -> 'Rotation': ...
	def Gx(self, angle: float) -> 'Rotation': ...
	def Gy(self, angle: float) -> 'Rotation': ...
	def Gz(self, angle: float) -> 'Rotation': ...
	def Lx(self, angle: float) -> 'Rotation': ...
	def Ly(self, angle: float) -> 'Rotation': ...
	def Lz(self, angle: float) -> 'Rotation': ...

	def __neg__(self) -> 'Rotation': ...
	def __pos__(self) -> 'Rotation': ...
	def __abs__(self) -> 'Rotation': ...

	def Inverse(self) -> 'Rotation': ...
	def InverseFrom(self, value: 'Rotation') -> 'Rotation': ...
	@classmethod
	def GetInverse(cls, value: 'Rotation') -> 'Rotation': ...

	def __iadd__(self, value: 'allowed_types_mat3') -> 'Rotation': ...

	def __add__(self, value: 'allowed_types_mat3') -> 'Rotation': ...

	def __radd__(self, value: float) -> 'Rotation': ...

	def __isub__(self, value: 'allowed_types_mat3') -> 'Rotation': ...

	def __sub__(self, value: 'allowed_types_mat3') -> 'Rotation': ...

	def __rsub__(self, value: float) -> 'Rotation': ...

	def __imul__(self, value: 'allowed_types_mat3') -> 'Rotation': ...

	@overload
	def __mul__(self, value: vec3) -> vec3: ...
	@overload
	def __mul__(self, value: 'allowed_types_mat3') -> 'Rotation': ...
	def __mul__(self, value: 'allowed_types_mat3_vec3') -> Union['Rotation', vec3]: ...

	def __rmul__(self, value: float) -> 'Rotation': ...


class vec4:

	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, value: float) -> None: ...

	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, value: float) -> None: ...

	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, value: float) -> None: ...

	@property
	def w(self) -> float: ...
	@w.setter
	def w(self, value: float) -> None: ...
	
	def __init__(self, x: float = zero_float, y: float = zero_float, z: float = zero_float, w: float = one_float) -> None: ...

	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[4]: ...
	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...
	def __contains__(self, value: float) -> bool: ...

	def __neg__(self) -> 'vec4': ...
	def __pos__(self) -> 'vec4': ...
	def __abs__(self) -> 'vec4': ...

	def __lt__(self, value: 'allowed_types_vec4') -> bool: ...
	def __le__(self, value: 'allowed_types_vec4') -> bool: ...
	def __eq__(self, value: 'allowed_types_vec4') -> bool: ...
	def __ne__(self, value: 'allowed_types_vec4') -> bool: ...
	def __gt__(self, value: 'allowed_types_vec4') -> bool: ...
	def __ge__(self, value: 'allowed_types_vec4') -> bool: ...

	def SetValues(self, x: float, y: float, z: float, w: float) -> None: ...
	def SetVector(self, value: 'vec4') -> None: ...

	def CreateCType(self) -> Array[c_float]: ...

	@property
	def magnitude(self) -> float: ...
	@property
	def sqrMagnitude(self) -> float: ...
	def Normalize(self) -> None: ...
	def Normalize_from(self, value: 'vec4') -> None: ...
	@classmethod
	def GetNormalized(cls, value: 'vec4') -> 'vec4': ...

	def __iadd__(self, value: 'allowed_types_vec4') -> 'vec4': ...

	def __add__(self, value: 'allowed_types_vec4') -> 'vec4': ...

	def __radd__(self, value: float) -> 'vec4': ...

	def __isub__(self, value: 'allowed_types_vec4') -> 'vec4': ...

	def __sub__(self, value: 'allowed_types_vec4') -> 'vec4': ...

	def __rsub__(self, value: float) -> 'vec4': ...

	def __imul__(self, value: 'allowed_types_vec4_mat4') -> 'vec4': ...

	def __mul__(self, value: 'allowed_types_vec4_mat4') -> 'vec4': ...

	def __rmul__(self, value: 'allowed_types_vec4') -> 'vec4': ...

	def __itruediv__(self, value: 'allowed_types_vec4') -> 'vec4': ...

	def __truediv__(self, value: 'allowed_types_vec4') -> 'vec4': ...

	def __rtruediv__(self, value: float) -> 'vec4': ...

allowed_types_vec4 = Union[vec4, float]
allowed_types_vec4_mat4 = Union[vec4, 'mat4', float]


class mat4:

	def __init__(self,
		m11: float = one_float, m12: float = zero_float, m13: float = zero_float, m14: float = zero_float,
		m21: float = zero_float, m22: float = one_float, m23: float = zero_float, m24: float = zero_float,
		m31: float = zero_float, m32: float = zero_float, m33: float = one_float, m34: float = zero_float,
		m41: float = zero_float, m42: float = zero_float, m43: float = zero_float, m44: float = one_float
	) -> None: ...

	def __repr__(self) -> str: ...


	def __len__(self) -> Literal[16]: ...			
	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...
	def __contains__(self, value: float) -> bool: ...

	def __neg__(self) -> 'mat4': ...
	def __pos__(self) -> 'mat4': ...
	def __abs__(self) -> 'mat4': ...

	def __lt__(self, value: float) -> bool: ...
	def __le__(self, value: float) -> bool: ...
	def __eq__(self, value: 'mat4') -> bool: ...
	def __ne__(self, value: 'mat4') -> bool: ...	
	def __ge__(self, value: float) -> bool: ...
	def __gt__(self, value: float) -> bool: ...

	def SetValues(self, m11: float, m12: float, m13: float, m14: float, m21: float, m22: float, m23: float, m24: float, m31: float, m32: float, m33: float, m34: float, m41: float, m42: float, m43: float, m44: float) -> None: ...
	def SetMatrix(self, value: 'mat4') -> None: ...

	def CreateCTypeBasisI(self) -> Array[c_float]: ...
	def CreateCTypeBasisJ(self) -> Array[c_float]: ...
	def CreateCTypeBasisK(self) -> Array[c_float]: ...
	def CreateCType(self) -> Array[c_float]: ...

	@property
	def determinant(self) -> float: ...

	def Inverse(self) -> 'mat4': ...
	def InverseFrom(self, value: 'mat4') -> 'mat4': ...
	@classmethod
	def GetInverse(cls, value: 'mat4') -> 'mat4': ...

	def __iadd__(self, value: 'allowed_types_mat4') -> 'mat4': ...

	def __add__(self, value: 'allowed_types_mat4') -> 'mat4': ...

	def __radd__(self, value: float) -> 'mat4': ...

	def __isub__(self, value: 'allowed_types_mat4') -> 'mat4': ...

	def __sub__(self, value: 'allowed_types_mat4') -> 'mat4': ...

	def __rsub__(self, value: float) -> 'mat4': ...

	def __imul__(self, value: 'allowed_types_mat4') -> 'mat4': ...

	@overload
	def __mul__(self, value: vec4) -> vec4: ...
	@overload
	def __mul__(self, value: 'allowed_types_mat4') -> 'mat4': ...
	def __mul__(self, value: 'allowed_types_mat4_vec4') -> Union['mat4', vec4]: ...

	def __rmul__(self, value: float) -> 'mat4': ...

allowed_types_mat4 = Union[mat4, float]
allowed_types_mat4_vec4 = Union[mat4, vec4, float]




class Transform:

	def __init__(self, position: vec3, scale: vec3, rotation: Rotation) -> None: ...

	def GetMatrixSRT(self) -> mat4: ...

	@property
	def position(self) -> vec3: ...
	@position.setter
	def position(self, value: vec3) -> None: ...

	@property
	def scale(self) -> vec3: ...
	@scale.setter
	def scale(self, value: vec3) -> None: ...

	@property
	def rotation(self) -> Rotation: ...
	@rotation.setter
	def rotation(self, value: Rotation) -> None: ...
