from ctypes import c_float, Array
from typing import Union, Literal, Optional, overload


def sin(value: float) -> float: ...
def cos(value: float) -> float: ...
def tan(value: float) -> float: ...



zero_float = 0.0
one_float = 1.0



class vec2_ptr_static(vec2):

	def LinkVector(self, value: vec2) -> None: ...
	def Unlink(self) -> None: ...

	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[2]: ...

	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...

	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, value: float) -> None: ...

	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, value: float) -> None: ...


	def __init__(self, x: float = zero_float, y: float = zero_float) -> None: ...


	def CreateCType(self) -> Array[c_float]: ...


	def SetValues(self, x: float, y: float) -> None: ...
	def SetVector(self, value: vec2) -> None: ...


	@property
	def magnitude(self) -> float: ...
	@property
	def sqrMagnitude(self) -> float: ...
	def Normalize(self) -> None: ...
	def NormalizeFrom(self, value: vec2) -> None: ...
	@staticmethod
	def GetNormalized(value: vec2) -> vec2: ...
	@staticmethod
	def GetDotProduct(valueA: vec2, valueB: vec2) -> float: ...


	def __contains__(self, value: float) -> bool: ...
	def __lt__(self, value: 'allowed_types_vec2') -> bool: ...
	def __le__(self, value: 'allowed_types_vec2') -> bool: ...
	def __eq__(self, value: 'allowed_types_vec2') -> bool: ...
	def __ne__(self, value: 'allowed_types_vec2') -> bool: ...
	def __gt__(self, value: 'allowed_types_vec2') -> bool: ...
	def __ge__(self, value: 'allowed_types_vec2') -> bool: ...

	def __neg__(self) -> vec2: ...
	def __pos__(self) -> vec2: ...
	def __abs__(self) -> vec2: ...

	def __iadd__(self, value: 'allowed_types_vec2') -> 'vec2_ptr_static': ...
	def __add__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __radd__(self, value: float) -> vec2: ...

	def __isub__(self, value: 'allowed_types_vec2') -> 'vec2_ptr_static': ...
	def __sub__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rsub__(self, value: float) -> vec2: ...

	def __ipow__(self, value: 'allowed_types_vec2') -> 'vec2_ptr_static': ...
	def __pow__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rpow__(self, value: float) -> vec2: ...

	def __itruediv__(self, value: 'allowed_types_vec2') -> 'vec2_ptr_static': ...
	def __truediv__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rtruediv__(self, value: float) -> vec2: ...
	
	def __ifloordiv__(self, value: 'allowed_types_vec2') -> 'vec2_ptr_static': ...
	def __floordiv__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rfloordiv__(self, value: float) -> vec2: ...

	def __imod__(self, value: 'allowed_types_vec2') -> 'vec2_ptr_static': ...
	def __mod__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rmod__(self, value: float) -> vec2: ...

	def __imul__(self, value: 'allowed_types_vec2') -> 'vec2_ptr_static': ...
	@overload
	def __mul__(self, value: vec2) -> vec2: ...
	@overload
	def __mul__(self, value: mat2) -> mat2: ...
	@overload
	def __mul__(self, value: float) -> vec2: ...
	def __mul__(self, value: 'allowed_types_vec2_mul') -> Union[vec2, mat2]: ...
	def __rmul__(self, value: float) -> vec2: ...

	def __imatmul__(self, value: mat2) -> 'vec2_ptr_static': ...
	def __matmul__(self, value: mat2) -> vec2: ...



class vec2:
	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[2]: ...

	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...

	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, value: float) -> None: ...

	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, value: float) -> None: ...


	def __init__(self, x: float = zero_float, y: float = zero_float) -> None: ...


	def CreateCType(self) -> Array[c_float]: ...


	def SetValues(self, x: float, y: float) -> None: ...
	def SetVector(self, value: vec2) -> None: ...


	@property
	def magnitude(self) -> float: ...
	@property
	def sqrMagnitude(self) -> float: ...
	def Normalize(self) -> None: ...
	def NormalizeFrom(self, value: vec2) -> None: ...
	@staticmethod
	def GetNormalized(value: vec2) -> vec2: ...
	@staticmethod
	def GetDotProduct(valueA: vec2, valueB: vec2) -> float: ...


	def __contains__(self, value: float) -> bool: ...
	def __lt__(self, value: 'allowed_types_vec2') -> bool: ...
	def __le__(self, value: 'allowed_types_vec2') -> bool: ...
	def __eq__(self, value: 'allowed_types_vec2') -> bool: ...
	def __ne__(self, value: 'allowed_types_vec2') -> bool: ...
	def __gt__(self, value: 'allowed_types_vec2') -> bool: ...
	def __ge__(self, value: 'allowed_types_vec2') -> bool: ...

	def __neg__(self) -> vec2: ...
	def __pos__(self) -> vec2: ...
	def __abs__(self) -> vec2: ...

	def __iadd__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __add__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __radd__(self, value: float) -> vec2: ...

	def __isub__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __sub__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rsub__(self, value: float) -> vec2: ...

	def __ipow__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __pow__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rpow__(self, value: float) -> vec2: ...

	def __itruediv__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __truediv__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rtruediv__(self, value: float) -> vec2: ...
	
	def __ifloordiv__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __floordiv__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rfloordiv__(self, value: float) -> vec2: ...

	def __imod__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __mod__(self, value: 'allowed_types_vec2') -> vec2: ...
	def __rmod__(self, value: float) -> vec2: ...

	def __imul__(self, value: 'allowed_types_vec2') -> vec2: ...
	@overload
	def __mul__(self, value: vec2) -> vec2: ...
	@overload
	def __mul__(self, value: mat2) -> mat2: ...
	@overload
	def __mul__(self, value: float) -> vec2: ...
	def __mul__(self, value: 'allowed_types_vec2_mul') -> Union[vec2, mat2]: ...
	def __rmul__(self, value: float) -> vec2: ...

	def __imatmul__(self, value: mat2) -> vec2: ...
	def __matmul__(self, value: mat2) -> vec2: ...

allowed_types_vec2 = Union[vec2, float]
allowed_types_vec2_mul = Union[vec2, mat2, float]

class mat2:
	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[9]: ...
		
	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...


	def __init__(self,
		m11: float = one_float, m12: float = zero_float,
		m21: float = zero_float, m22: float = one_float
	) -> None: ...


	def CreateCTypeBasisI(self) -> Array[c_float]: ...
	def CreateCTypeBasisJ(self) -> Array[c_float]: ...
	def CreateCTypeBasisK(self) -> Array[c_float]: ...
	def CreateCType(self) -> Array[c_float]: ...


	def SetValues(self, 
		m11: float, m12: float, 
		m21: float, m22: float
	) -> None: ...
	def SetMatrix(self, value: mat2) -> None: ...

	def SetIdentity(self) -> None: ...


	@property
	def determinant(self) -> float: ...

	def Inverse(self) -> None: ...
	def InverseFrom(self, value: mat2) -> None: ...
	@staticmethod
	def GetInverse(value: mat2) -> mat2: ...

	def Transpose(self) -> None: ...
	def TransposeFrom(self, value: mat2) -> None: ...
	@staticmethod
	def GetTransposed(value: mat2) -> mat2: ...

	def __contains__(self, value: float) -> bool: ...
	def __lt__(self, value: 'allowed_types_mat2') -> bool: ...
	def __le__(self, value: 'allowed_types_mat2') -> bool: ...
	def __eq__(self, value: 'allowed_types_mat2') -> bool: ...
	def __ne__(self, value: 'allowed_types_mat2') -> bool: ...
	def __gt__(self, value: 'allowed_types_mat2') -> bool: ...
	def __ge__(self, value: 'allowed_types_mat2') -> bool: ...

	def __neg__(self) -> mat2: ...
	def __pos__(self) -> mat2: ...
	def __abs__(self) -> mat2: ...

	def __iadd__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __add__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __radd__(self, value: float) -> mat2: ...

	def __isub__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __sub__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __rsub__(self, value: float) -> mat2: ...

	def __ipow__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __pow__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __rpow__(self, value: float) -> mat2: ...

	def __itruediv__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __truediv__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __rtruediv__(self, value: float) -> mat2: ...

	def __ifloordiv__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __floordiv__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __rfloordiv__(self, value: float) -> mat2: ...

	def __imod__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __mod__(self, value: 'allowed_types_mat2') -> mat2: ...
	def __rmod__(self, value: float) -> mat2: ...

	def __imul__(self, value: 'allowed_types_mat2_mul') -> mat2: ...
	def __mul__(self, value: 'allowed_types_mat2_mul') -> mat2: ...
	def __rmul__(self, value: float) -> mat2: ...

	def __imatmul__(self, value: mat2) -> mat2: ...
	@overload
	def __matmul__(self, value: vec2) -> vec2: ...
	@overload
	def __matmul__(self, value: mat2) -> mat2: ...
	def __matmul__(self, value: 'allowed_types_mat2_matmul') -> Union[mat2, vec2]: ...

allowed_types_mat2 = Union[mat2, float]
allowed_types_mat2_mul = Union[mat2, vec2]
allowed_types_mat2_matmul = Union[mat2, vec2]







class vec3:
	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[3]: ...

	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...

	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, value: float) -> None: ...

	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, value: float) -> None: ...

	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, value: float) -> None: ...


	def __init__(self, x: float = zero_float, y: float = zero_float, z: float = zero_float) -> None: ...


	def CreateCType(self) -> Array[c_float]: ...


	def SetValues(self, x: float, y: float, z: float) -> None: ...
	def SetVector(self, value: vec3) -> None: ...


	@property
	def magnitude(self) -> float: ...
	@property
	def sqrMagnitude(self) -> float: ...
	def Normalize(self) -> None: ...
	def NormalizeFrom(self, value: vec3) -> None: ...
	@staticmethod
	def GetNormalized(value: vec3) -> vec3: ...
	@staticmethod
	def GetDotProduct(valueA: vec3, valueB: vec3) -> float: ...
	def CrossProduct(self, value: vec3) -> None: ...
	def CrossProductFrom(self, valueA: vec3, valueB: vec3) -> None: ...
	@staticmethod
	def GetCrossProduct(valueA: vec3, valueB: vec3) -> vec3: ...


	def __contains__(self, value: float) -> bool: ...
	def __lt__(self, value: 'allowed_types_vec3') -> bool: ...
	def __le__(self, value: 'allowed_types_vec3') -> bool: ...
	def __eq__(self, value: 'allowed_types_vec3') -> bool: ...
	def __ne__(self, value: 'allowed_types_vec3') -> bool: ...
	def __gt__(self, value: 'allowed_types_vec3') -> bool: ...
	def __ge__(self, value: 'allowed_types_vec3') -> bool: ...

	def __neg__(self) -> vec3: ...
	def __pos__(self) -> vec3: ...
	def __abs__(self) -> vec3: ...

	def __iadd__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __add__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __radd__(self, value: float) -> vec3: ...

	def __isub__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __sub__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __rsub__(self, value: float) -> vec3: ...

	def __ipow__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __pow__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __rpow__(self, value: float) -> vec3: ...

	def __itruediv__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __truediv__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __rtruediv__(self, value: float) -> vec3: ...
	
	def __ifloordiv__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __floordiv__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __rfloordiv__(self, value: float) -> vec3: ...

	def __imod__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __mod__(self, value: 'allowed_types_vec3') -> vec3: ...
	def __rmod__(self, value: float) -> vec3: ...

	def __imul__(self, value: 'allowed_types_vec3') -> vec3: ...
	@overload
	def __mul__(self, value: vec3) -> vec3: ...
	@overload
	def __mul__(self, value: mat3) -> mat3: ...
	@overload
	def __mul__(self, value: float) -> vec3: ...
	def __mul__(self, value: 'allowed_types_vec3_mul') -> Union[vec3, mat3]: ...
	def __rmul__(self, value: float) -> vec3: ...

	def __imatmul__(self, value: mat3) -> vec3: ...
	def __matmul__(self, value: mat3) -> vec3: ...

allowed_types_vec3 = Union[vec3, float]
allowed_types_vec3_mul = Union[vec3, mat3, float]

class mat3:
	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[9]: ...
		
	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...


	def __init__(self,
		m11: float = one_float, m12: float = zero_float, m13: float = zero_float,
		m21: float = zero_float, m22: float = one_float, m23: float = zero_float,
		m31: float = zero_float, m32: float = zero_float, m33: float = one_float
	) -> None: ...


	def CreateCTypeBasisI(self) -> Array[c_float]: ...
	def CreateCTypeBasisJ(self) -> Array[c_float]: ...
	def CreateCTypeBasisK(self) -> Array[c_float]: ...
	def CreateCType(self) -> Array[c_float]: ...


	def SetValues(self, 
		m11: float, m12: float, m13: float, 
		m21: float, m22: float, m23: float, 
		m31: float, m32: float, m33: float) -> None: ...
	def SetMatrix(self, value: mat3) -> None: ...

	def SetIdentity(self) -> None: ...


	@property
	def determinant(self) -> float: ...

	def Inverse(self) -> None: ...
	def InverseFrom(self, value: mat3) -> None: ...
	@staticmethod
	def GetInverse(value: mat3) -> mat3: ...

	def Transpose(self) -> None: ...
	def TransposeFrom(self, value: mat3) -> None: ...
	@staticmethod
	def GetTransposed(value: mat3) -> mat3: ...

	def __contains__(self, value: float) -> bool: ...
	def __lt__(self, value: 'allowed_types_mat3') -> bool: ...
	def __le__(self, value: 'allowed_types_mat3') -> bool: ...
	def __eq__(self, value: 'allowed_types_mat3') -> bool: ...
	def __ne__(self, value: 'allowed_types_mat3') -> bool: ...
	def __gt__(self, value: 'allowed_types_mat3') -> bool: ...
	def __ge__(self, value: 'allowed_types_mat3') -> bool: ...

	def __neg__(self) -> mat3: ...
	def __pos__(self) -> mat3: ...
	def __abs__(self) -> mat3: ...

	def __iadd__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __add__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __radd__(self, value: float) -> mat3: ...

	def __isub__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __sub__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __rsub__(self, value: float) -> mat3: ...

	def __ipow__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __pow__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __rpow__(self, value: float) -> mat3: ...

	def __itruediv__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __truediv__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __rtruediv__(self, value: float) -> mat3: ...

	def __ifloordiv__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __floordiv__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __rfloordiv__(self, value: float) -> mat3: ...

	def __imod__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __mod__(self, value: 'allowed_types_mat3') -> mat3: ...
	def __rmod__(self, value: float) -> mat3: ...

	def __imul__(self, value: 'allowed_types_mat3_mul') -> mat3: ...
	def __mul__(self, value: 'allowed_types_mat3_mul') -> mat3: ...
	def __rmul__(self, value: float) -> mat3: ...

	def __imatmul__(self, value: mat3) -> mat3: ...
	@overload
	def __matmul__(self, value: vec3) -> vec3: ...
	@overload
	def __matmul__(self, value: mat3) -> mat3: ...
	def __matmul__(self, value: 'allowed_types_mat3_matmul') -> Union[mat3, vec3]: ...

allowed_types_mat3 = Union[mat3, float]
allowed_types_mat3_mul = Union[mat3, vec3]
allowed_types_mat3_matmul = Union[mat3, vec3]


class Rotation(mat3):
	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[9]: ...
		
	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...


	def Rotate(self, angle: float, x: float, y: float, z: float) -> Rotation: ...
	def Gx(self, angle: float) -> Rotation: ...
	def Gy(self, angle: float) -> Rotation: ...
	def Gz(self, angle: float) -> Rotation: ...
	def Lx(self, angle: float) -> Rotation: ...
	def Ly(self, angle: float) -> Rotation: ...
	def Lz(self, angle: float) -> Rotation: ...


	def __init__(self,
		m11: float = one_float, m12: float = zero_float, m13: float = zero_float,
		m21: float = zero_float, m22: float = one_float, m23: float = zero_float,
		m31: float = zero_float, m32: float = zero_float, m33: float = one_float
	) -> None: ...


	def CreateCTypeBasisI(self) -> Array[c_float]: ...
	def CreateCTypeBasisJ(self) -> Array[c_float]: ...
	def CreateCTypeBasisK(self) -> Array[c_float]: ...
	def CreateCType(self) -> Array[c_float]: ...


	def SetValues(self, 
		m11: float, m12: float, m13: float, 
		m21: float, m22: float, m23: float, 
		m31: float, m32: float, m33: float) -> None: ...
	def SetMatrix(self, value: Rotation) -> None: ...

	def SetIdentity(self) -> None: ...


	@property
	def determinant(self) -> float: ...

	def Inverse(self) -> None: ...
	def InverseFrom(self, value: Rotation) -> None: ...
	@staticmethod
	def GetInverse(value: Rotation) -> Rotation: ...

	def Transpose(self) -> None: ...
	def TransposeFrom(self, value: Rotation) -> None: ...
	@staticmethod
	def GetTransposed(value: Rotation) -> Rotation: ...

	def __contains__(self, value: float) -> bool: ...
	def __lt__(self, value: 'allowed_types_mat3') -> bool: ...
	def __le__(self, value: 'allowed_types_mat3') -> bool: ...
	def __eq__(self, value: 'allowed_types_mat3') -> bool: ...
	def __ne__(self, value: 'allowed_types_mat3') -> bool: ...
	def __gt__(self, value: 'allowed_types_mat3') -> bool: ...
	def __ge__(self, value: 'allowed_types_mat3') -> bool: ...

	def __neg__(self) -> Rotation: ...
	def __pos__(self) -> Rotation: ...
	def __abs__(self) -> Rotation: ...

	def __iadd__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __add__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __radd__(self, value: float) -> Rotation: ...

	def __isub__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __sub__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __rsub__(self, value: float) -> Rotation: ...

	def __ipow__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __pow__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __rpow__(self, value: float) -> Rotation: ...

	def __itruediv__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __truediv__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __rtruediv__(self, value: float) -> Rotation: ...

	def __ifloordiv__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __floordiv__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __rfloordiv__(self, value: float) -> Rotation: ...

	def __imod__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __mod__(self, value: 'allowed_types_mat3') -> Rotation: ...
	def __rmod__(self, value: float) -> Rotation: ...

	def __imul__(self, value: 'allowed_types_mat3_mul') -> Rotation: ...
	def __mul__(self, value: 'allowed_types_mat3_mul') -> Rotation: ...
	def __rmul__(self, value: float) -> Rotation: ...

	def __imatmul__(self, value: Rotation) -> Rotation: ...
	@overload
	def __matmul__(self, value: vec3) -> vec3: ...
	@overload
	def __matmul__(self, value: Rotation) -> Rotation: ...
	def __matmul__(self, value: 'allowed_types_mat3_matmul') -> Union[Rotation, vec3]: ...






class vec4:
	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[4]: ...

	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...

	@property
	def x(self) -> float: ...
	@x.setter
	def x(self, value: float) -> None: ...

	@property
	def y(self) -> float: ...
	@y.setter
	def y(self, value: float) -> None: ...

	@property
	def z(self) -> float: ...
	@z.setter
	def z(self, value: float) -> None: ...

	@property
	def w(self) -> float: ...
	@w.setter
	def w(self, value: float) -> None: ...


	def __init__(self, x: float = zero_float, y: float = zero_float, z: float = zero_float, w: float = zero_float) -> None: ...


	def CreateCType(self) -> Array[c_float]: ...


	def SetValues(self, x: float, y: float, z: float, w: float) -> None: ...
	def SetVector(self, value: vec4) -> None: ...


	@property
	def magnitude(self) -> float: ...
	@property
	def sqrMagnitude(self) -> float: ...
	def Normalize(self) -> None: ...
	def NormalizeFrom(self, value: vec4) -> None: ...
	@staticmethod
	def GetNormalized(value: vec4) -> vec4: ...
	@staticmethod
	def GetDotProduct(valueA: vec4, valueB: vec4) -> float: ...

	def __contains__(self, value: float) -> bool: ...
	def __lt__(self, value: 'allowed_types_vec4') -> bool: ...
	def __le__(self, value: 'allowed_types_vec4') -> bool: ...
	def __eq__(self, value: 'allowed_types_vec4') -> bool: ...
	def __ne__(self, value: 'allowed_types_vec4') -> bool: ...
	def __gt__(self, value: 'allowed_types_vec4') -> bool: ...
	def __ge__(self, value: 'allowed_types_vec4') -> bool: ...

	def __neg__(self) -> vec4: ...
	def __pos__(self) -> vec4: ...
	def __abs__(self) -> vec4: ...

	def __iadd__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __add__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __radd__(self, value: float) -> vec4: ...

	def __isub__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __sub__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __rsub__(self, value: float) -> vec4: ...

	def __ipow__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __pow__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __rpow__(self, value: float) -> vec4: ...

	def __itruediv__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __truediv__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __rtruediv__(self, value: float) -> vec4: ...
	
	def __ifloordiv__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __floordiv__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __rfloordiv__(self, value: float) -> vec4: ...

	def __imod__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __mod__(self, value: 'allowed_types_vec4') -> vec4: ...
	def __rmod__(self, value: float) -> vec4: ...

	def __imul__(self, value: 'allowed_types_vec4') -> vec4: ...
	@overload
	def __mul__(self, value: vec4) -> vec4: ...
	@overload
	def __mul__(self, value: mat4) -> mat4: ...
	@overload
	def __mul__(self, value: float) -> vec4: ...
	def __mul__(self, value: 'allowed_types_vec4_mul') -> Union[vec4, mat4]: ...
	def __rmul__(self, value: float) -> vec4: ...

	def __imatmul__(self, value: mat4) -> vec4: ...
	def __matmul__(self, value: mat4) -> vec4: ...

allowed_types_vec4 = Union[vec4, float]
allowed_types_vec4_mul = Union[vec4, mat4, float]

class mat4:
	def __repr__(self) -> str: ...

	def __len__(self) -> Literal[16]: ...
		
	def __getitem__(self, index: int) -> float: ...
	def __setitem__(self, index: int, value: float) -> None: ...


	def __init__(self,
		m11: float = one_float, m12: float = zero_float, m13: float = zero_float, m14: float = zero_float,
		m21: float = zero_float, m22: float = one_float, m23: float = zero_float, m24: float = zero_float,
		m31: float = zero_float, m32: float = zero_float, m33: float = one_float, m34: float = zero_float,
		m41: float = zero_float, m42: float = zero_float, m43: float = zero_float, m44: float = one_float
	) -> None: ...


	def CreateCTypeBasisI(self) -> Array[c_float]: ...
	def CreateCTypeBasisJ(self) -> Array[c_float]: ...
	def CreateCTypeBasisK(self) -> Array[c_float]: ...
	def CreateCTypeBasisW(self) -> Array[c_float]: ...
	def CreateCType(self) -> Array[c_float]: ...


	def SetValues(self, 
		m11: float, m12: float, m13: float, m14: float,
		m21: float, m22: float, m23: float, m24: float,
		m31: float, m32: float, m33: float, m34: float,
		m41: float, m42: float, m43: float, m44: float
	) -> None: ...
	def SetMatrix(self, value: mat4) -> None: ...

	def SetIdentity(self) -> None: ...


	@property
	def determinant(self) -> float: ...

	def Inverse(self) -> None: ...
	def InverseFrom(self, value: mat4) -> None: ...
	@staticmethod
	def GetInverse(value: mat4) -> mat4: ...

	def Transpose(self) -> None: ...
	def TransposeFrom(self, value: mat4) -> None: ...
	@staticmethod
	def GetTransposed(value: mat4) -> mat4: ...

	def __contains__(self, value: float) -> bool: ...
	def __lt__(self, value: 'allowed_types_mat4') -> bool: ...
	def __le__(self, value: 'allowed_types_mat4') -> bool: ...
	def __eq__(self, value: 'allowed_types_mat4') -> bool: ...
	def __ne__(self, value: 'allowed_types_mat4') -> bool: ...
	def __gt__(self, value: 'allowed_types_mat4') -> bool: ...
	def __ge__(self, value: 'allowed_types_mat4') -> bool: ...

	def __neg__(self) -> mat4: ...
	def __pos__(self) -> mat4: ...
	def __abs__(self) -> mat4: ...

	def __iadd__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __add__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __radd__(self, value: float) -> mat4: ...

	def __isub__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __sub__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __rsub__(self, value: float) -> mat4: ...

	def __ipow__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __pow__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __rpow__(self, value: float) -> mat4: ...

	def __itruediv__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __truediv__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __rtruediv__(self, value: float) -> mat4: ...

	def __ifloordiv__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __floordiv__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __rfloordiv__(self, value: float) -> mat4: ...

	def __imod__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __mod__(self, value: 'allowed_types_mat4') -> mat4: ...
	def __rmod__(self, value: float) -> mat4: ...

	def __imul__(self, value: 'allowed_types_mat4_mul') -> mat4: ...
	def __mul__(self, value: 'allowed_types_mat4_mul') -> mat4: ...
	def __rmul__(self, value: float) -> mat4: ...

	def __imatmul__(self, value: mat4) -> mat4: ...
	@overload
	def __matmul__(self, value: vec4) -> vec4: ...
	@overload
	def __matmul__(self, value: mat4) -> mat4: ...
	def __matmul__(self, value: 'allowed_types_mat4_matmul') -> Union[mat4, vec4]: ...

allowed_types_mat4 = Union[mat4, float]
allowed_types_mat4_mul = Union[mat4, vec4]
allowed_types_mat4_matmul = Union[mat4, vec4]








class Transform:
	def __init__(self, position: vec3, scale: vec3, rotation: Rotation) -> None: ...

	def GetParent(self) -> Optional['Transform']: ...
	def SetParent(self, parent: Optional['Transform']) -> None: ...

	@property
	def local_position(self) -> vec3: ...
	@property
	def position(self) -> vec3: ...
	@position.setter
	def position(self, value: vec3) -> None: ...

	@property
	def local_scale(self) -> vec3: ...
	@property
	def scale(self) -> vec3: ...
	@scale.setter
	def scale(self, value: vec3) -> None: ...

	@property
	def local_rotation(self) -> Rotation: ...
	@property
	def rotation(self) -> Rotation: ...
	@rotation.setter
	def rotation(self, value: Rotation) -> None: ...

	@property
	def local_forward(self) -> vec3: ...
	@property
	def forward(self) -> vec3: ...

	@property
	def local_right(self) -> vec3: ...
	@property
	def right(self) -> vec3: ...

	@property
	def local_up(self) -> vec3: ...
	@property
	def up(self) -> vec3: ...

	@property
	def local_matrix_srt(self) -> mat4: ...
	@property
	def matrix_srt(self) -> mat4: ...

	@property
	def local_matrix_trs(self) -> mat4: ...
	@property
	def matrix_trs(self) -> mat4: ...





